'use client';

import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';
import { AuthData, RegisterData, User, UserWithRole } from '../types';
import AuthService from '../services/authService';
import RoleService from '../services/roleService';

interface AuthContextType {
  isAuthenticated: boolean;
  user: UserWithRole | null; // –ò–∑–º–µ–Ω–∏–ª–∏ —Ç–∏–ø –Ω–∞ UserWithRole
  login: (authData: AuthData) => Promise<void>;
  register: (registerData: RegisterData) => Promise<User>;
  logout: () => void;
  loading: boolean;
  refreshUserInfo: () => Promise<void>; // –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};

interface AuthProviderProps {
  children: ReactNode;
}

export const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {
  const [isAuthenticated, setIsAuthenticated] = useState<boolean>(false);
  const [user, setUser] = useState<UserWithRole | null>(null);
  const [loading, setLoading] = useState<boolean>(true);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
  const refreshUserInfo = async (): Promise<void> => {
    try {
      const userWithRole = await RoleService.getCurrentUserWithRole();
      setUser(userWithRole);
      localStorage.setItem('user', JSON.stringify(userWithRole));
      console.log('‚úÖ User info refreshed from backend:', userWithRole);
    } catch (error) {
      console.error('‚ùå Failed to refresh user info:', error);
      // –ü—Ä–∏ –æ—à–∏–±–∫–µ –Ω–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –≤–æ–∑–º–æ–∂–Ω–æ —Ç–æ–∫–µ–Ω –µ—â–µ –≤–∞–ª–∏–¥–µ–Ω
    }
  };

  useEffect(() => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    const initializeAuth = async () => {
      const token = AuthService.getToken();
      if (token) {
        try {
          // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
          const userWithRole = await RoleService.getCurrentUserWithRole();
          setUser(userWithRole);
          setIsAuthenticated(true);
          localStorage.setItem('user', JSON.stringify(userWithRole));
          console.log('‚úÖ Auth initialized from backend:', userWithRole);
        } catch (error) {
          console.warn('‚ö†Ô∏è Could not get user from backend, trying localStorage fallback');
          // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ, 
          // –ø—Ä–æ–±—É–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ localStorage
          const userData = localStorage.getItem('user');
          if (userData) {
            try {
              const parsedUser = JSON.parse(userData);
              // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å —Ä–æ–ª—å
              if (!parsedUser.role) {
                parsedUser.role = RoleService.determineRole(parsedUser);
              }
              setUser(parsedUser);
              setIsAuthenticated(true);
              console.log('üì± Used localStorage fallback:', parsedUser);
            } catch (e) {
              console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', e);
              // –û—á–∏—â–∞–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
              AuthService.logout();
              localStorage.removeItem('user');
            }
          } else {
            // –¢–æ–∫–µ–Ω –µ—Å—Ç—å, –Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç - –æ—á–∏—â–∞–µ–º —Ç–æ–∫–µ–Ω
            AuthService.logout();
          }
        }
      }
      setLoading(false);
    };

    initializeAuth();
  }, []);

  const login = async (authData: AuthData): Promise<void> => {
    try {
      const response = await AuthService.login(authData);
      setIsAuthenticated(true);
      
      // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
      try {
        const userWithRole = await RoleService.getCurrentUserWithRole();
        setUser(userWithRole);
        localStorage.setItem('user', JSON.stringify(userWithRole));
        console.log('‚úÖ Login successful, user from backend:', userWithRole);
      } catch (userError) {
        console.warn('‚ö†Ô∏è Could not get user info from backend, using fallback logic');
        
        // Fallback: –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –ª–æ–≥–∏–Ω–∞
        let userRole: 'USER' | 'MODERATOR' | 'ADMIN' = 'USER';
        const lowerLogin = authData.username.toLowerCase();
        
        const adminLogins = ['admin', 'admin.larionov', 'administrator', 'artyom.larionov'];
        if (adminLogins.includes(lowerLogin) || lowerLogin.startsWith('admin.')) {
          userRole = 'ADMIN';
        } else if (lowerLogin.startsWith('mod.') || lowerLogin.startsWith('moderator.')) {
          userRole = 'MODERATOR';
        }

        const basicUser: UserWithRole = {
          id: 1,
          username: authData.username,
          authorities: [],
          firstName: userRole === 'ADMIN' ? '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' : userRole === 'MODERATOR' ? '–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä' : authData.username.split('.')[0] || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
          lastName: userRole === 'ADMIN' ? '–°–∏—Å—Ç–µ–º—ã' : userRole === 'MODERATOR' ? '–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä' : authData.username.split('.')[1] || '–°–∏—Å—Ç–µ–º—ã',
          email: authData.username,
          role: userRole,
          moderatorId: userRole === 'MODERATOR' ? 1 : null,
          departmentsIds: []
        };
        setUser(basicUser);
        localStorage.setItem('user', JSON.stringify(basicUser));
      }
    } catch (error) {
      throw error;
    }
  };

  const register = async (registerData: RegisterData): Promise<User> => {
    try {
      const user = await AuthService.register(registerData);
      // –ü–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –≤—Ö–æ–¥
      return user;
    } catch (error) {
      throw error;
    }
  };

  const logout = (): void => {
    AuthService.logout();
    setIsAuthenticated(false);
    setUser(null);
    localStorage.removeItem('user');
  };

  const value: AuthContextType = {
    isAuthenticated,
    user,
    login,
    register,
    logout,
    loading,
    refreshUserInfo,
  };

  return (
    <AuthContext.Provider value={value}>
      {children}
    </AuthContext.Provider>
  );
};

export default AuthProvider; 